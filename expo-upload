import React, { useState, useEffect } from 'react';
import { View, Button, StyleSheet, Alert, Text, ScrollView, TouchableOpacity, Platform, TextInput } from 'react-native';
import * as FileSystem from 'expo-file-system';
import * as DocumentPicker from 'expo-document-picker';
import { Platform as WebPlatform } from 'react-native-web';

const App = () => {
  const [fileList, setFileList] = useState([]);
  const [error, setError] = useState('');
  const [uploading, setUploading] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);
  const [fileName, setFileName] = useState('');
  const [fileInput, setFileInput] = useState(null);

  // Backend URL
  const BACKEND_URL = 'http://YOUR_BACKEND_IP:5000';

  useEffect(() => {
    if (Platform.OS === 'web') {
      // Create a file input for web
      const input = document.createElement('input');
      input.type = 'file';
      input.style.display = 'none';
      input.addEventListener('change', handleWebFileSelect);
      document.body.appendChild(input);
      setFileInput(input);
      return () => {
        document.body.removeChild(input);
      };
    }
  }, []);

  const handleWebFileSelect = async (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedFile(file);
      setFileName(file.name);
    }
  };

  // Fetch the list of files from the backend
  const fetchFileList = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/files`);
      if (response.ok) {
        const data = await response.json();
        if (Array.isArray(data)) {
          setFileList(data);
          setError('');
        } else {
          setError('Unexpected response format');
        }
      } else {
        setError('Could not fetch file list. Please check the backend.');
      }
    } catch (error) {
      setError('Could not fetch file list. Please check the backend.');
    }
  };

  // Download the selected file
  const downloadFile = async (fileName) => {
    try {
      let fileUrl = `${BACKEND_URL}/download/${fileName}`;
      let fileUri = FileSystem.documentDirectory + fileName;

      const { uri } = await FileSystem.downloadAsync(fileUrl, fileUri);
      Alert.alert('File Downloaded', `File saved to ${uri}`);
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  // Upload a file
  const uploadFile = async () => {
    try {
      setUploading(true);

      let file;
      if (Platform.OS === 'web') {
        file = selectedFile;
      } else {
        const res = await DocumentPicker.getDocumentAsync({
          type: '*/*',
          copyToCacheDirectory: true,
        });

        if (res.type === 'cancel') {
          return;
        }

        file = {
          uri: res.uri,
          name: res.name,
          type: res.mimeType || 'application/octet-stream',
        };
      }

      if (file) {
        const formData = new FormData();
        formData.append('file', {
          uri: file.uri || fileInput.files[0].name,
          name: file.name,
          type: file.type,
        });

        // Upload file
        const response = await fetch(`${BACKEND_URL}/upload`, {
          method: 'POST',
          body: formData,
          // Do not set 'Content-Type' header manually
        });

        if (!response.ok) {
          throw new Error('Failed to upload file');
        }

        Alert.alert('Success', 'File uploaded successfully');
        setUploading(false);
        fetchFileList(); // Refresh file list
      }
    } catch (error) {
      console.error('Error uploading file:', error);
      Alert.alert('Error', 'Failed to upload file. Please try again.');
      setUploading(false);
    }
  };

  const handleFileSelect = () => {
    if (Platform.OS === 'web' && fileInput) {
      fileInput.click();
    } else {
      uploadFile();
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Get All Files" onPress={fetchFileList} />
      <Button title="Upload File" onPress={handleFileSelect} disabled={uploading} />
      {error ? (
        <Text style={styles.error}>{error}</Text>
      ) : (
        <ScrollView style={styles.fileList}>
          {fileList.map((fileName, index) => (
            <TouchableOpacity key={index} onPress={() => downloadFile(fileName)}>
              <Text style={styles.fileItem}>{fileName}</Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
  },
  fileList: {
    marginTop: 20,
  },
  fileItem: {
    padding: 10,
    fontSize: 18,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  error: {
    color: 'red',
    fontSize: 16,
    textAlign: 'center',
    marginTop: 20,
  },
});

export default App;
